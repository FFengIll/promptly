# https://taskfile.dev

version: '3'

vars:
  GREETING: Hello, World!

tasks:
  default:
    cmds:
      - echo "{{.GREETING}}"
    silent: true
  
  build:
    cmds:
      - task: black
      - task: codegen
      - task: dist
  
  install:
    desc: "install deps for the project"
    dir: "{{.ROOT_DIR}}"
    cmds:
      - task: install-node
      - task: install-python
  
  install-node:
    desc: "install node deps for the project"
    dir: "{{.ROOT_DIR}}/web"
    cmds:
      - pnpm install

  install-python:
    desc: "install python deps for the project"
    dir: "{{.ROOT_DIR}}"
    cmds:
      # - python3 -m pip install -U pip
      - pip3 install poetry
      - poetry install
  
  fmt:
    desc: "format python with black"
    dir: "{{.ROOT_DIR}}"
    cmds:
      - black .
  
  db-start:
    desc: "create db via docker"
    dir: "{{.ROOT_DIR}}"
    cmds:
      - mkdir -p ./data/mongodb
      - docker run --name promptly-mongo -p 27017:27017 -p 8001:8001 -v ./data/mongodb:/data/db -d mongo || echo "done"
      - docker start promptly-mongo
  
  db-restart:
    desc: "resest db via docker"
    dir: "{{.ROOT_DIR}}"
    cmds:
      - task: db-stop
      - task: db-start
  
  db-stop:
    desc: "stop db via docker"
    dir: "{{.ROOT_DIR}}"
    cmds:
      - docker stop promptly-mongo || echo "done"
      - docker container remove promptly-mongo || echo "done"
  
  db-backup:
    desc: "backup db via docker"
    cmds:
      - |
        docker exec -it promptly-mongo \
        mongodump --db promptly --out /data/db/backup/
    
  db-cleanup:
    desc: "clear db journal"
    dir: "{{.ROOT_DIR}}"
    cmds:
      - task: db-stop
      - rm -rf ./data/mongodb/journal
      - rm -rf ./data/mongodb/diagnostic.data

  data-dump:
    dir: "{{.ROOT_DIR}}"
    cmds:
      - task: db-cleanup
      - zip -r data/mongodb.zip data/mongodb
  
  data-load:
    dir: "{{.ROOT_DIR}}"
    cmds:
      - task: db-stop
      - mv data/mongodb data/mongodb.bak || echo "ignore or done"
      - unzip data/mongodb.zip -d .
      - task: db-start
  
  codegen:
    desc: "generate sdk via swagger"
    dir: "{{.ROOT_DIR}}"
    deps:
      - task: db-start
    cmds:
      - rm -rf ./web/src/sdk
      - poetry run python bin/swagger.py
      - swagger-codegen generate -i ./data/swagger.json -l typescript-axios -o ./web/src/sdk
      - git add ./web/src/sdk
  
  dist:
    desc: "build for dist"
    dir: "{{.ROOT_DIR}}/frontend/v2"
    cmds:
      - pnpm run build-only -m prod
  
  front:
    desc: start front for dev
    dir: "{{.ROOT_DIR}}/frontend/v2"
    aliases:
      - "web"
      - "node"
    cmds:
      - pnpm run dev
      
  front-legacy:
    desc: start front for dev
    dir: "{{.ROOT_DIR}}/frontend/v1"
    cmds:
      - pnpm run dev
  
  debug:
    dir: "{{.ROOT_DIR}}"
    cmds:
      - poetry run python bin/main.py -c config/llm.yaml --reload
  
  backend:
    desc: start backend for dev
    dir: "{{.ROOT_DIR}}"
    aliases:
      - "py"
    deps:
      - task: db-start
    cmds:
      - poetry run python bin/main.py -c config/llm.yaml
  
  run:
    desc: run server without reload
    dir: "{{.ROOT_DIR}}"
    deps:
      - task: db-start
      - task: dist
    cmds:
      - poetry run python bin/main.py -c config/llm.yaml

  config:
    desc: auto generate config file
    dir: "{{.ROOT_DIR}}"
    cmds:
      - cp -v -n config/sample.yaml config/llm.yaml

  hold:
    cmds:
      - |
        echo "dev mode"
        while true  # 无限循环
        do
            sleep 1000  # 每次睡眠2秒钟
        done
  
  dev:
    desc: run in dev mode
    deps:
      - py
      - web
    cmds:
      - task: hold